//*****************************************************************************
//
//  Copyright (C) 2004, International Business Machines
//  Corporation and others.  All Rights Reserved.
//
//  file name:  icuio.txt
//  encoding:   US-ASCII
//  tab size:   4 (not used)
//  indentation:4
//
//  created on: 2004Apr06
//  created by: George Rhoten
//
//  ICU resource bundle source file with test data for data-driven ICU I/O tests.
//
//*****************************************************************************

icuio {
    Info {
        Description { "Test data for ICU I/O" }
        LongDescription {
            "Test data for data-driven conversion tests in icu/source/test/iotest/iotest.cpp\n"
            "Run iotest printf\n"

            "argumentType:\n"
            "\td: double\n"
            "\t1: int8_t (hexadecimal)\n"
            "\t2: int16_t (hexadecimal)\n"
            "\t4: int32_t (hexadecimal)\n"
            "\t8: int64_t (hexadecimal)\n"
            "\ts: char * string\n"
            "\tS: UChar * string\n"
        }
    }
    TestData {
        printf {
            Headers { "format", "result", "argumentType", "argument" }
            Cases {
                {
                    "%e", "1.200000e+000", "d", "1.2"
                }
                {
                    "%e", "1.234568e+006", "d", "1234567.89"
                }
                {
                    "%E", "1.234568E+006", "d", "1234567.89"
                }
                {
                    "%10e", "1.234568e+000", "d", "1.23456789"
                }
                {
                    "%10.4e", "1.2346e+000", "d", "1.23456789"
                }
                {
                    "%-10e", "1.234568e+000", "d", "1.23456789"
                }
                {
                    "%10e", "1.234568e+002", "d", "123.456789"
                }
                {
                    "%-10e", "1.234568e+002", "d", "123.456789"
                }
                {
                    "%-+12.1e", "+1.2e+000   ", "d", "1.234"
                }
                {
                    "%-+12.1e", "-1.2e+000   ", "d", "-1.234"
                }
                {
                    "%- 12.10e", " 1.2340000000e+000", "d", "1.234"
                }
                {
                    "%- 12.1e", "-1.2e+000   ", "d", "-1.234"
                }
                {
                    "%+12.1e", "   +1.2e+000", "d", "1.234"
                }
                {
                    "%+12.1e", "   -1.2e+000", "d", "-1.234"
                }
                {
                    "% 12.1e", "    1.2e+000", "d", "1.234"
                }
                {
                    "% 12.1e", "   -1.2e+000", "d", "-1.234"
                }
                {
                    "%12.1e", "    1.2e+000", "d", "1.234"
                }
                {
                    "%12.1e", "   -1.2e+000", "d", "-1.234"
                }
                {
                    "%.2e", "1.23e+000", "d", "1.234"
                }
                {
                    "%.2e", "-1.23e+000", "d", "-1.234"
                }
                {
                    "%3e", "1.234000e+000", "d", "1.234"
                }
                {
                    "%3e", "-1.234000e+000", "d", "-1.234"
                }
                {
                    "%g", "12345.7", "d", "12345.6789"
                }
                {
                    "%g", "123457", "d", "123456.789"
                }
                {
                    "%g", "1.23457e+006", "d", "1234567.89"
                }
                {
                    "%G", "12345.7", "d", "12345.6789"
                }
                {
                    "%G", "123457", "d", "123456.789"
                }
                {
                    "%G", "1.23457E+006", "d", "1234567.89"
                }
                {
                    "%hx", "8ace", "2", "8ace"
                }
            }
        }
        printfPrecision {
            Headers { "format", "result", "argumentType", "argument", "precision" }
            Cases {
                {
                    "%+1.*e", "+1.2346e+000", "d", "1.2345678", :int{4}
                }
                {
                    "%+2.*e", "+1.234568e+000", "d", "1.2345678", :int{6}
                }
            }
        }
        scanf {
            Headers { "format", "argument", "argumentType", "result" }
            Cases {
                {
                    "%e", "1.200000e+000", "d", "1.2"
                }
            }
        }
    }
}
