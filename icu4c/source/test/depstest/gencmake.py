#! /usr/bin/python
# -*- coding: utf-8 -*-
#
__copyright__ = """#
# Copyright (C) 2011-2014, International Business Machines Corporation and others.
# All Rights Reserved.
"""
#
# file name: gencmake.py
#
# created on: 2014 Oct 17
# based on depstest.py by Markus Scherer

"""Extract source file lists from the dependency maps.
"""

__author__ = "Steven R. Loomis"

import glob
import os.path
import subprocess
import sys

import dependencies
srcDir = os.path.abspath('../../../source')
print "# Source dir = %s" % (srcDir)
cmakeDir = os.path.join(srcDir, 'cmake-modules')
pathsFile = os.path.join(cmakeDir, 'IcuPaths.cmake')
print "# Generating   %s.." % pathsFile

out = open(pathsFile, 'w+')
out.write('# GENERATED by gencmake.py\n')
out.write(__copyright__)
out.write('# \n')
out.write('# (Obligatory) don\'t edit, just re-run gencmake.py\n\n')

source_suffixes = frozenset({'cpp','c'})

dependencies.Load()
print "Collecting ICU libraries from dependencies.txt.."
for library in dependencies.libraries:
  item = dependencies.items[library]
  print library
  processed = set({library}) # set of items already processed (to avoid dups)
  files = set()     # set of files to output for this library
  libDeps = set()

  out.write("set(ICU_%s\n" % library)

  def addDeps(indent, item, processed, libDeps):
    if item['type'] == 'library':
      parLibrary = item['name']
    else:
      parLibrary = item['library']
    for dep in item.get('deps',{}):
      subItem = dependencies.items[dep]
      if dep in processed:
        # Already-seen.
        #print "%s~%s" % (indent, dep)
        return
      processed |= set({dep})
      subLib = subItem.get('library', None)
      if parLibrary != subLib:
        # Cross-library dependency.
        # print "%s-%s [%s]" % (indent, dep, subLib)
        libDeps |= set({subLib})
        return
      print "%s+%s" % (indent, dep)
      # ADD ALL FILES
      subFiles = subItem.get('files',None)
      if subFiles:
        libSource = os.path.join(srcDir, parLibrary)
        #print libSource
        libSourceList = os.listdir(libSource)
        out.write("    # %s\n" % dep)
        for subFile in subFiles:
          (dirName,objName) = subFile.split('/')
          if dirName != parLibrary:
            sys.exit("Error: subfile %s in library %s has wrong dirName %s" % (subFile, parLibrary, dirName))
          (baseName,objExtn) = objName.split('.')
          if objExtn != 'o':
            sys.exit("Error: subfile %s in library %s has preposterous extension %s" % (subFile, parLibrary, objExtn))

          def findIgnoreExtn(libSourceList, baseName):
            for actualFile in libSourceList:
              fileSplit = actualFile.split('.')
              if fileSplit[-1] not in source_suffixes:
                continue # not in acceptable suffixes
              actualBase = '.'.join(fileSplit[:-1])
              if actualBase == baseName: # match!
                return actualFile
            return None

          # now look for the file
          actualFile = findIgnoreExtn(libSourceList, baseName)
          if actualFile:
            out.write("    %s\n" % actualFile)  # TODO: add to long list..
          else:
            sys.exit("dependencies.txt: %s:%s no source file found!" % (parLibrary, subFile))
      else:
        out.write("    # %s (no files)\n" % dep)
      # ADD SUBDEPS
      addDeps('%s ' % indent, subItem, processed, libDeps)

  # kick it off..
  addDeps(' ', item, processed, libDeps)
  out.write("    # LIBRARY DEPENDENCIES: %s\n" % libDeps)
  out.write("    )\n");
  out.write("\n")

print "Done"
